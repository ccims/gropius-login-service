# Note this file contains all possible config variables for the login service.
# They are annotated an explained and their default values pointed out.
# Recocmendation: Don't adapt the values in this file but create a ".env.dev.local" file
#                 (or ".env.prod.local" for production deployment).
#                 Values in this file will overwrite values in here and defaults.
#                 Alternatively set environment variables, they will overwrite all config files


# ----------General settings------------------
### JWT secret used to sign tokens that are not access tokens to the backend.
### It is recommended to choos a different secret from GROPIUS_INTERNAL_BACKEND_JWT_SECRET to avoid token misuse
### Make sure this is a LONG and RANDOM value and NOBONDY knows it. Else they can create valid tokens
#GROPIUS_LOGIN_SPECIFIC_JWT_SECRET=login_secret  # required, no default

### The value to put in the issuer field all jwt signed.
### Can be any value but a unique value is recommended
GROPIUS_JWT_ISSUER=gropius-login # default: gropius-login

### The time after which a issued access token for the backend expires and needs to be refreshed
### Specify the value in ms
### CAUTION: Access tokens can not easily be revoked. Don't make this time too long
GROPIUS_ACCESS_TOKEN_EXPIRATION_TIME_MS=600000 # default: 48h*60min/h*60s/min*1000ms/s

### The time after which an oauth code, issued after finishing the oauth server flow, expires
### This is the time a client has between receiving tha callback and fetching the access token
GROPIUS_OAUTH_CODE_EXPIRATION_TIME_MS=600000 # default: 600000 = 10min

### The time after a registration of a new authentication until it expires
### This is a time the USER between passing the authentication flow and submitting the registration form in the client
### Don't set this too short or users will be frustrated, that they can't complete the registration
GROPIUS_REGISTRATION_EXPIRATION_TIME_MS=600000  # default: 600000 = 10min

### The time after which a regular login event (non sync login) will expire and refresh tokens become invalid
### The actual time after which the user looses access is quantized by the expiration time of the issued access token
#GROPIUS_REGULAR_LOGINS_INACTIVE_EXPIRATION_TIME_MS=0 # default: 0; if 0 logins won't expire

### The authentication events on which a search for yet unlinked ims users will be done
### to link them to the authentication and (if present) the gropius user
GROPIUS_PERFORM_IMS_USER_SEARCH_ON=LOGIN,REG,REG_SYNC  # default: LOGIN,REG,REG_SYNC, comma separated list of modes to perform ims user search on

### The length (in bytes) of the generated client secrets for the oauth clients
GROPIUS_CLIENT_SECRET_LENGTH=48  # default: 48

### The port number on which to listen for API requests
GROPIUS_LOGIN_LISTEN_PORT=3000  # default: 3000

### Enable or disable the api explorer/doc (note: if false, will also disable OpenAPI specification)
GROPIUS_LOGIN_ENABLE_OPENAPI=true # default: true


# -----------Gropius-backend internal API config----------------------
### The full GraphQL-API endpoint URL of the internal backend api (usually ends with /graphql)
### Remember: If running in docker-compose, you can use the docker service name as hostname
#GROPIUS_INTERNAL_BACKEND_ENDPOINT=http://api-internal:8081/graphql  # default: http://localhost:8081/graphql

### The API secret that the internal backend API expects to allow requests
### Will be prefixed with "Bearer "
GROPIUS_INTERNAL_BACKEND_TOKEN=super_secret  # default: no token

### Secret to be used to sign the access tokens that can be used with the backend
### Must be the same value as configured in the backend so the tokens are accepted
### It is recommended to choos a different secret from GROPIUS_LOGIN_SPECIFIC_JWT_SECRET to avoid token misuse
### Make sure this is a LONG and RANDOM value and NOBONDY knows it. Else they can create valid tokens
### This secret Text will be interpreted as base64 encoded
#GROPIUS_INTERNAL_BACKEND_JWT_SECRET=backend_secret  # required, no default


# --------------Database (postgres) configuration
### The database driver to use. Supported values: "postgres" (reccomended) and ("sqlite")
### Note: The application relies on postgres specific types and SQL features in some places. The sqlite functionality is UNTESTED
### To run the service without a running database (e.g. for api inspection) it is however useful to be able to switch to "sqlite"
#GROPIUS_LOGIN_DATABASE_DRIVER=sqlite  # default: postgres

### The hostname of the postgres databas server (remember: docker service names)
GROPIUS_LOGIN_DATABASE_HOST=login-service-database  # default: localhost

### The port on which the postgres database is listening
GROPIUS_LOGIN_DATABASE_PORT=5432  # default: 5432 (default postgres port)

### The username in the postgres database to use
GROPIUS_LOGIN_DATABASE_USER=postgres  # default: postgres

### The password for the user specified above
GROPIUS_LOGIN_DATABASE_PASSWORD=postgres  # default: postgres

### For postgres: Name of the database to use on the server
### For sqlite: appended with ".sqlite" this specifies the Database file path
GROPIUS_LOGIN_DATABASE_DATABASE=gropius  # default: gropius


# -----------------Passport strategies options-----------------------
### The issuer to use in JWTs used to preserve state while using a oauth authentication provider
### Using a different value than with GROPIUS_JWT_ISSUER is recommended to avoid token misuse
GROPIUS_PASSPORT_STATE_JWT_ISSUER=gropius-login-state  # default: gropius-login-state

### The number of rounds to pass to bcrypt when in use (e.g. for auth client secrets, passwords, ...)
### The actual number of rounds will be 2^GROPIUS_BCRYPT_HASH_ROUNDS
### Choosing this wisely is importand. Too low makes the hashes unsecure and too high makes hasing take too long
GROPIUS_BCRYPT_HASH_ROUNDS=10  # default: 10

### Set to true to allow login strategies that don't use the full OAuth flow but just post credentials (e.g. userpass)
### to get a token without needing to provide a client id (a client without client secret still needs to exist)
#GROPIUS_ALLOW_PASSWORD_TOKEN_MODE_WITHOUT_OAUTH_CLIENT=false  # default: false in production, true in testing and dev


# ------------------Sync-service API settings---------------------------
### The secret that is expected from a sync service client connecting to the sync API prefixed with "Bearer "
### Set this to a long and unguessable value to ensure only the sync services can access tha api and request tokens from users
#GROPIUS_LOGIN_SYNC_API_SECRET=secret_value  # default: no value; if no value no secret is expected


# -----------------Entity management-------------------------
### The following section allows creating default strategy instance and user for initialization.
### If none of the values are set (i.e. if they're commented out), no entity creation will take place.

### Parameters for creating a strategy instance.
### Type and instance cnfig must be given for creation to happen.
### The config should follow the same rules as when creating through the API
#GROPIUS_DEFAULT_STRATEGY_INSTANCE_TYPE=userpass
#GROPIUS_DEFAULT_STRATEGY_INSTANCE_CONFIG={}
#GROPIUS_DEFAULT_STRATEGY_INSTANCE_NAME=userpass-local

### Parameters for creating an admin user.
### Username, displayName and strategy instance name are required for creation to happen.
### This canonly create users for strategies that accept credentials via POST
### (i.e. not for oauth, ...). The structure/valiables of the post data must be the same as for the API request
### If a user with that username already exists or the credentials aren't unique, the creation will fail
#GROPIUS_DEFAULT_USER_USERNAME=administrator
#GROPIUS_DEFAULT_USER_DISPLAYNAME=System-Admin
#GROPIUS_DEFAULT_USER_POST_DATA={"password": "admin"}
#GROPIUS_DEFAULT_USER_STRATEGY_INSTANCE_NAME=userpass-local

### Parameter for creating an auth client
### If this is set, an auth client with that name and with no requirement for secrets will be created.
### If you set the (optional) id, it will take precedence and a client will be created, if none with the given id AND name exist
### To use it for oauth, set a redirect url
### The clientId of the created/found auth client will be printed to the console on startup
#GROPIUS_DEFAULT_AUTH_CLIENT_NAME=initial-client
#GROPIUS_DEFAULT_AUTH_CLIENT_ID=01234567-89ab-cdef-fedc-ba9876543210
#GROPIUS_DEFAULT_AUTH_CLIENT_REDIRECT=http://localhost:1234/redirect

### Checking the consistency of the database entitities on startup
### Possible values: "none" (do not check consistency), 
### "check" (check and exit if inconsistent), "fix" (check and fix inconsistencies if possible)
GROPIUS_DEFAULT_CHECK_DATABASE_CONSISTENT=check