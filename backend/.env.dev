# Note this file contains all possible config variables for the login service.
# They are annotated an explained and their default values pointed out.
# Recocmendation: Don't adapt the values in this file but create a ".env.dev.local" file
#                 (or ".env.prod.local" for production deployment).
#                 Values in this file will overwrite values in here and defaults.
#                 Alternatively set environment variables, they will overwrite all config files


# ----------General settings------------------
# Public key to verify OAuth JWT tokens
GROPIUS_OAUTH_PUBLIC_KEY="LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzYk9TSnJWM3VCN1IxcE4xYUQvOQpzc3pIVzV2RGRHMHBPS2JxdWlaclFCRmRrbTZuYUQzU1F2TWVnWHQ0ZGF0YnVzRHZiWDdJRS9DdS9uUEhXN2Z3Cnc5TGRKQ0Z5M0tSQ0NGQUJTd1QwUkxHaUNUejBCRkhCZFlzWjF2K2E1NU9lb3J0Q2NBRkRJbFdCQzJzL2FtaWYKQ242bHhkS3JQWHROSlBtTmdhVWI1S240K1l6OVJnTmkvWk5yeUZtNlRrd1FnMTNhNXJNM0NPYkt1WGdPdDdDYgpDWUpYYnJTL1k3VXRwUmwrd1lpQ012SnJneGgrTXJWKzdOSW9UZ2wvZm9JSU9PZUR5dXJhS09mYW1peDBHbWNyCi9tK2dGTGdtUVVMbmQ3M1hncmdGZ1NNbUU3UVhlczlnQkx5bE55dUxUUVVBb1RTZW1mQUJJemp4MWgxZC9tNVoKUXdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
# Private key to sign OAuth JWT tokens
GROPIUS_OAUTH_PRIVATE_KEY="LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ3hzNUltdFhlNEh0SFcKazNWb1AvMnl6TWRibThOMGJTazRwdXE2Sm10QUVWMlNicWRvUGRKQzh4NkJlM2gxcTF1NndPOXRmc2dUOEs3KwpjOGRidC9ERDB0MGtJWExjcEVJSVVBRkxCUFJFc2FJSlBQUUVVY0YxaXhuVy81cm5rNTZpdTBKd0FVTWlWWUVMCmF6OXFhSjhLZnFYRjBxczllMDBrK1kyQnBSdmtxZmo1alAxR0EyTDlrMnZJV2JwT1RCQ0RYZHJtc3pjSTVzcTUKZUE2M3NKc0pnbGR1dEw5anRTMmxHWDdCaUlJeThtdURHSDR5dFg3czBpaE9DWDkrZ2dnNDU0UEs2dG9vNTlxYQpMSFFhWnl2K2I2QVV1Q1pCUXVkM3ZkZUN1QVdCSXlZVHRCZDZ6MkFFdktVM0s0dE5CUUNoTko2WjhBRWpPUEhXCkhWMytibGxEQWdNQkFBRUNnZ0VBRnIxZWRnS2gwOWRwemRZbjM1UFV3TVV3dTduV2pMY05YOWtJVDVMc0JaSlQKVVpKRWJQUUFUSjMwNk9mbWRkUmNWQzB0Vm1zemFrM1I3dkRjOFpFN3g2dGJyaXh6bU9XU0o2TXBUekxPbVYzTAoyUGZLV0NVb0p3VUtaUGRubUx2TXdKRkxBcTgrcW8yYmlsMEtpL0RnYlVUZ3JNeDFLbFIxZmtaTEEreWZnYWJCCjk1UEZKSVdORXJaNGpzQ0k2YmFLTjZsYVI1VERLSUhmVlJSTW9pUnk1Z1U3d0VDc2tJRjV3SytwaC9OYzdzQVAKMm0xVDNCNUVVYjB3MnYydXl2TWdmRU9iVlF1NHI3MEFyWmxlWVZlOHcxRktZSjVid1ZnclFYMnJkVUdwY0RRQgpIRWR3TGdsM2h6R3FTZnExcmllZTh0TjBxM0xvblNRZ2U1Yll2Y3k3WVFLQmdRREw4YjdoU2E2YVF6djkwMzc2ClQvbTVLSVRBZXdSbGNrVXJqQU1uaVRnZkFyeVg5enN0YTdaMDdoTnYxMDZ1UTFxOWt5OFNMWE0zVCtPUjRmWkkKMG4vWHJvSlcyZS9ZcWNab1NuSTVMVWp1bEJSVG1MN2JBUzk4M0twYTFycWpWZkxDT0xCeFVlbElFTW5nbUsvZwo1UjByM1dSNzhpSVhoZFZVTkI5bk5RalY0UUtCZ1FEZkR3d3c0dlZ6YXNMSFQvUkxhUEtocGEyMm5zKzN0Y1FpCnJvczl0UVgvajRscjl4NVY5MExjZkUrYUt1MXBWcG1oUVJhVFJ4VXVPeWpIOVlkeDdzRWtiT2V1N2E2ZjVMS1kKdlZlYWppNVd1QjQ2SUVpMWtFU2ExSzMyS2lHM3hBQUxNNWpYckNja0VRaHhCWEhjdHpOMFNwMk9IMTZOOWhLbwp0UFFVT1UyTG93S0JnUUNITEs0bHlKNlA1S3hvcXJ2bzBRVmw4ak03R001ckp2Z3R5dGwwWlFEcm5QYS9pc0NRCmRHbzB5bS9ibTB1dE9UdDFsNDZGYjlhRC9OR0xLY2dCc0hQSDB3VFU2QktPK3NoazY2TVZ2cXd1WmJ1clJQeUwKVUJmWG5MTFZEcW9hQktlb2o4Wnk5YVczZkZreUlrSEF3RnM3YmJ4aVlyU3gvcVRNOE5jM292RStRUUtCZ1FEQQp5MXZKSVZIdmVWWnpPVXM0cHJRWVBZQmcrUEVtbzBlc2hscTVjaTZHRGtWRCtTclNPTTRranBtcThmR1QrNUw4CkNxcjlqeEhpaktXWjkwRWptNjU2MGxxS0dzdTFUZEdFTFJ0NzdlcGxiK3hJWjBFUkZXb0d2VTdERnZWZnhWd1kKVW5lSDZqZEdlQ1pvc2NFUmVaTlNyMjl3dVBKY0YxVlhWbGdrNXNaOHF3S0JnSHJreXFESmRhblhFQWtYY1pYVgp2bno2eUdpVFAwT2Zpa05DeHJLZkQ0RkhUajc0eWdPTnJNY2RTWDNIWnhVK0V3dHVRQ3B0RUtibHQ5dWJORGF3ClIrRlZQWUF6QWJ4blZpMXFvKzN3V3hHVnp3elQwTGdhZyt5WnYvMU54aXJxL1FPeC94R3dNL0phWVhVNUhJV3oKejBjb3k1TlNDQVUyZlpydjlWVnVHTEs4Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"
# Public key to verify login service specific JWT tokens
GROPIUS_LOGIN_SPECIFIC_PUBLIC_KEY="LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6K1FhM1k4S2ZRQlRrN3lVY0F6WgphT3VENm4wSHRVYnIxSHFrRjZZREExRzI5NlE4QjNJZU9GOEw3NXZlWmVQNHNWempaS01lc25lTVdPRFh5T0xHCmhlbU95azEyaEEwS0JidG9wV3YzaWNPeG9OR3VKN2xPVnlZR25ORXN6ZzNvM0J2QlpCeU9SU0IwSk53SzE1QmEKWXRrS3R0ZEZqNzZld1ZWSXpacFZaRXRhZm1NNTZ1NFpzQytOY3RUWDhwM2dTdnF5RXdTZGYySEcyNnU3U2F3YwpoTHZ0NUxMVHpMbVlROURreW14QVcyRzhkMW9hSXB1UnBLMWcwOHJGdXJ4TGlQOHJVZFpLZG10aFVoUmY2clFzCkRDWnVpTXA1SHY0NFVCUUY1SURtVjltWlNCeVJFZG1zSjRFL3pCUmRlbXJJeE1NZW1LQkxNalY3ZkFOR29ycDAKVlFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="
# Private key to sign login service specific JWT tokens
GROPIUS_LOGIN_SPECIFIC_PRIVATE_KEY="LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRRFA1QnJkandwOUFGT1QKdkpSd0RObG82NFBxZlFlMVJ1dlVlcVFYcGdNRFViYjNwRHdIY2g0NFh3dnZtOTVsNC9peFhPTmtveDZ5ZDR4WQo0TmZJNHNhRjZZN0tUWGFFRFFvRnUyaWxhL2VKdzdHZzBhNG51VTVYSmdhYzBTek9EZWpjRzhGa0hJNUZJSFFrCjNBclhrRnBpMlFxMjEwV1B2cDdCVlVqTm1sVmtTMXArWXpucTdobXdMNDF5MU5meW5lQksrcklUQkoxL1ljYmIKcTd0SnJCeUV1KzNrc3RQTXVaaEQwT1RLYkVCYllieDNXaG9pbTVHa3JXRFR5c1c2dkV1SS95dFIxa3AyYTJGUwpGRi9xdEN3TUptNkl5bmtlL2poUUZBWGtnT1pYMlpsSUhKRVIyYXduZ1QvTUZGMTZhc2pFd3g2WW9Fc3lOWHQ4CkEwYWl1blJWQWdNQkFBRUNnZ0VBQVg0aGFlT0hLQmVSNVBlT0dxa0xJL1FhOWVaUTRUMDQ0QXNKSGhlSXJXbmIKQ24xajYvUGJFSGRySnpubUsrRndBZkxzRnZpYURQdkZ1QzloU3hXVWZlMXV4bFZvU0dBSjNaYTNZQkpWRERSWQpGR29aWDkzSDBzb2tXNXFVRXhOU2NuWDNBemtINTAxTWQzY0RwTk1CWjkyY09rbm9kY0NiS1B2T3R0dGwydUk5CklPQmcrUlRWdlcxUHh5aWNGUUE0MU5ScE5uNGl4K1N0QUJZbnRwQVRxc0JZU3lPUmpjTDE1YzZuZUtDd1NpRG0KNUdmbVpPVUplNnQ2RjlzMFpjdWZOY2lOUm9FdFN5MWs0SW9XUmpMUUdBeGdtanYvaWRxSk45MEZLSlhTT2JwVgorVzFiYzVKK0NiQ05qNGxlT2haT2d0YlJkWW1wYUJzOGNvTVlUTCt0ZVFLQmdRRGF6YkVoRllqUjlGU2lXVzE0ClFnZ1BTczMxZHhTNDFac0NpZnhuNWt2UG9DSkJxWllhYlZtZWhBWHkxSm9DcGh4dkpyZWdsQlo5dFZqVjNLZjYKeXMyOGVVTVJsZ2FGNzRWUmhwWWc0OC9QSVBVckJ3elQ3OTFCSDdLbk4vZTY3UG9vZk5DdFRQZmZDNGR4cnFQZAp3aGE5Ty82OUtvOFJyTExCVy81MkhwdGNIUUtCZ1FEek80RVVzRUpmM0xjOE14aUlXRWFVUnVDUURUYWFlWWZFCmZFZ0lnT2VmOEFmWnBCS0s0SFliZXplMXA3MjhvSFRoWWFseUhTcGhDVnFVOG93b2NvWWRvbnFBV2FkWkEyY1EKZ3RrMk9xTmR2NW1DclNWa2sweSt2VkE3eVdyTGZveEVwYUMveW1iOWFuMEFSdktXV0psYXhXSHZncitqbThtUgp1RTlaWDU5VG1RS0JnRXA4OGd0SVVIN2hoaHFMQlVpR2VrWHllbkZSYTkyTTRxdVhuRFVtNHJJNVd0QXQwcXNHCmhSY0E3U0dCSFRrL29iaDVYdFFzOWdjdndLRjE4RDNoNHU2Qi9jSXo1OTZhN3pFVTkzRVUvVDhQZ2tkMnEvaE8KMVcwQlJJbkc5UEJQRXM3THh5TG9iQTRqMTZWdEJkNU4zLzNtT2MvZWVEeFZKYm5ML3JIcHM0eEZBb0dBTlJvMApvRE9yQ2dyQjVsNnhhSEw5VmJuenBQOTlnRlF3RS9HZU9GME1OSnJPMi9FNkt4KytLVm5KVzl0M1RRc3ErVm05CkNMRGRZN29MRUtHemY5RWcvcTlPVjE4N2JlK1VQTUtVY1laenpDL2NiKzhsVHNQcDZXcWpiYW9YcXIzQ0dlcWYKSWNBcXBBRHZzWFBMMm84VlMvL3oxYnFSNUVKS3k0bVZxVWw3RzJFQ2dZQVNJd2ZnZjEzNUwxUDZuUGx3dkhoUwozQUswWVhvU25RZ1NmYlRGcVc4MjFTV0ltaHJvVFR5Ri84b243ajZlRC90N1JYc3RpTzZFQjhtZXB6WlhsZm54Cm1QMkpoNEpGbWZuZjdCVWlWR2lEaEp0L1g4UzYrNTNkekY1eEVCYzBLWmxhRlVoM2g1czJPVGw5VXUzVXBSSTYKVk41dm05NnBWbEZpRDFwamFNOXJJZz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K"

### The value to put in the issuer field all jwt signed.
### Can be any value but a unique value is recommended
GROPIUS_JWT_ISSUER=gropius-login # default: gropius-login

### The time after which a issued access token for the backend expires and needs to be refreshed
### Specify the value in ms
### CAUTION: Access tokens can not easily be revoked. Don't make this time too long
GROPIUS_ACCESS_TOKEN_EXPIRATION_TIME_MS=600000 # default: 48h*60min/h*60s/min*1000ms/s

### The time after which an oauth code, issued after finishing the oauth server flow, expires
### This is the time a client has between receiving tha callback and fetching the access token
GROPIUS_OAUTH_CODE_EXPIRATION_TIME_MS=600000 # default: 600000 = 10min

### The time after a registration of a new authentication until it expires
### This is a time the USER between passing the authentication flow and submitting the registration form in the client
### Don't set this too short or users will be frustrated, that they can't complete the registration
GROPIUS_REGISTRATION_EXPIRATION_TIME_MS=600000  # default: 600000 = 10min

### The time after which a regular login event (non sync login) will expire and refresh tokens become invalid
### The actual time after which the user looses access is quantized by the expiration time of the issued access token
#GROPIUS_REGULAR_LOGINS_INACTIVE_EXPIRATION_TIME_MS=0 # default: 0; if 0 logins won't expire

### The authentication events on which a search for yet unlinked ims users will be done
### to link them to the authentication and (if present) the gropius user
GROPIUS_PERFORM_IMS_USER_SEARCH_ON=LOGIN,REG,REG_SYNC  # default: LOGIN,REG,REG_SYNC, comma separated list of modes to perform ims user search on

### The length (in bytes) of the generated client secrets for the oauth clients
GROPIUS_CLIENT_SECRET_LENGTH=48  # default: 48

### The port number on which to listen for API requests
GROPIUS_LOGIN_LISTEN_PORT=3001  # default: 3000

### Enable or disable the api explorer/doc (note: if false, will also disable OpenAPI specification)
GROPIUS_LOGIN_ENABLE_OPENAPI=true # default: true


# -----------Gropius-backend internal API config----------------------
### The full GraphQL-API endpoint URL of the internal backend api (usually ends with /graphql)
### Remember: If running in docker-compose, you can use the docker service name as hostname
#GROPIUS_INTERNAL_BACKEND_ENDPOINT=http://api-internal:8081/graphql  # default: http://localhost:8081/graphql

### The API secret that the internal backend API expects to allow requests
### Will be prefixed with "Bearer "
GROPIUS_INTERNAL_BACKEND_TOKEN=TodoInternalApiToken  # default: no token

### Secret to be used to sign the access tokens that can be used with the backend
### Must be the same value as configured in the backend so the tokens are accepted
### It is recommended to choos a different secret from GROPIUS_LOGIN_SPECIFIC_JWT_SECRET to avoid token misuse
### Make sure this is a LONG and RANDOM value and NOBONDY knows it. Else they can create valid tokens
### This secret Text will be interpreted as base64 encoded
#GROPIUS_OAUTH_JWT_SECRET=backend_secret  # required, no default


# --------------Database (postgres) configuration
### The database driver to use. Supported values: "postgres" (reccomended) and ("sqlite")
### Note: The application relies on postgres specific types and SQL features in some places. The sqlite functionality is UNTESTED
### To run the service without a running database (e.g. for api inspection) it is however useful to be able to switch to "sqlite"
#GROPIUS_LOGIN_DATABASE_DRIVER=sqlite  # default: postgres

### The hostname of the postgres databas server (remember: docker service names)
GROPIUS_LOGIN_DATABASE_HOST=localhost  # default: localhost

### The port on which the postgres database is listening
GROPIUS_LOGIN_DATABASE_PORT=5432  # default: 5432 (default postgres port)

### The username in the postgres database to use
GROPIUS_LOGIN_DATABASE_USER=postgres  # default: postgres

### The password for the user specified above
GROPIUS_LOGIN_DATABASE_PASSWORD=postgres  # default: postgres

### For postgres: Name of the database to use on the server
### For sqlite: appended with ".sqlite" this specifies the Database file path
GROPIUS_LOGIN_DATABASE_DATABASE=gropius  # default: gropius


# -----------------Passport strategies options-----------------------
### The issuer to use in JWTs used to preserve state while using a oauth authentication provider
### Using a different value than with GROPIUS_JWT_ISSUER is recommended to avoid token misuse
GROPIUS_PASSPORT_STATE_JWT_ISSUER=gropius-login-state  # default: gropius-login-state

### The number of rounds to pass to bcrypt when in use (e.g. for auth client secrets, passwords, ...)
### The actual number of rounds will be 2^GROPIUS_BCRYPT_HASH_ROUNDS
### Choosing this wisely is importand. Too low makes the hashes unsecure and too high makes hasing take too long
GROPIUS_BCRYPT_HASH_ROUNDS=10  # default: 10


# ------------------Sync-service API settings---------------------------
### The secret that is expected from a sync service client connecting to the sync API prefixed with "Bearer "
### Set this to a long and unguessable value to ensure only the sync services can access tha api and request tokens from users
GROPIUS_LOGIN_SYNC_API_SECRET=TODO_loginSecret  # default: no value; if no value no secret is expected


# -----------------Entity management-------------------------
### The following section allows creating default strategy instance and user for initialization.
### If none of the values are set (i.e. if they're commented out), no entity creation will take place.

### Parameters for creating a strategy instance.
### Type and instance cnfig must be given for creation to happen.
### The config should follow the same rules as when creating through the API
#GROPIUS_DEFAULT_STRATEGY_INSTANCE_TYPE=userpass
#GROPIUS_DEFAULT_STRATEGY_INSTANCE_CONFIG={}
#GROPIUS_DEFAULT_STRATEGY_INSTANCE_NAME=userpass-local

### Parameters for creating an admin user.
### Username, displayName and strategy instance name are required for creation to happen.
### This canonly create users for strategies that accept credentials via POST
### (i.e. not for oauth, ...). The structure/valiables of the post data must be the same as for the API request
### If a user with that username already exists or the credentials aren't unique, the creation will fail
#GROPIUS_DEFAULT_USER_USERNAME=administrator
#GROPIUS_DEFAULT_USER_DISPLAYNAME=System-Admin
#GROPIUS_DEFAULT_USER_POST_DATA={"password": "admin"}
#GROPIUS_DEFAULT_USER_STRATEGY_INSTANCE_NAME=userpass-local

### Checking the consistency of the database entitities on startup
### Possible values: "none" (do not check consistency), 
### "check" (check and exit if inconsistent), "fix" (check and fix inconsistencies if possible)
GROPIUS_DEFAULT_CHECK_DATABASE_CONSISTENT=check

# -----------------Gropius endpoints-------------------------
### The URL where the Gropius frontend is hosted
GROPIUS_ENDPOINT=http://localhost:4200  # required, no default